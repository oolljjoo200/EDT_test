
&НаКлиенте
Процедура ПолучитьКурсыВалют(Команда)
	ПолучитьКурсыВалютНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьКурсыВалютНаСервере()
	
	СоответствиеВалют = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Валюты.Код КАК Код,
		|	Валюты.Наименование КАК Наименование,
		|	Валюты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	НЕ Валюты.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеВалют.Вставить(Выборка.Наименование, Выборка.Ссылка);
	КонецЦикла;
	
	// https://www.nbrb.by/api/exrates/rates?periodicity=0&ondate=2023-02-20
	URL = СтрШаблон("https://www.nbrb.by/api/exrates/rates?periodicity=%1&ondate=%2", 
						0, Формат(ДатаКурсов, "ДФ=yyyy-MM-dd"));
	
	МассивДанных = КоннекторHTTP.GetJson(URL);
	
	Для каждого ДанныеКурса Из МассивДанных Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("1 %1 = %2 BYN за %3 ед.", 
		ДанныеКурса["Cur_Abbreviation"], 
		ДанныеКурса["Cur_OfficialRate"], 
		ДанныеКурса["Cur_Scale"]);
		Сообщение.Сообщить();
		
		Валюта = СоответствиеВалют[ДанныеКурса["Cur_Abbreviation"]];
		Если ЗначениеЗаполнено(Валюта) Тогда
			ЗаписьРегистра = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Период	 = ДатаКурсов;
			ЗаписьРегистра.Валюта	 = Валюта;
			ЗаписьРегистра.Курс		 = ДанныеКурса["Cur_OfficialRate"];
			ЗаписьРегистра.Кратность = ДанныеКурса["Cur_Scale"];
			ЗаписьРегистра.Записать();
		КонецЕсли;
		
	КонецЦикла;

	
	//// 1. Создать соединение
	//ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	//Соединение = Новый HTTPСоединение("www.nbrb.by",,,,,30, ЗащищенноеСоединение);
	//
	//АдресРесурса = СтрШаблон("/api/exrates/rates?periodicity=%1&ondate=%2",
	//						0, Формат(ДатаКурсов, "ДФ=yyyy-MM-dd"));
	//						
	//// 2. Создать HTTP-запрос
	//Запрос = Новый HTTPЗапрос(АдресРесурса);
	//
	//// 3. Отправить запрос серверу
	//Попытка
	//	Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);	
	//Исключение
	//    Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Не удалось отправить запрос, причина: " + ОписаниеОшибки();
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецПопытки;
	//
	//// 4. Проверка кода состояния
	//Если Ответ.КодСостояния = 200 Тогда
	//	
	//	//5. Обработка ответа
	//	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	//	ЧтениеJSON = Новый ЧтениеJSON;
	//	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	//	
	//	МассивДанных = ПрочитатьJSON(ЧтениеJSON, Истина);
	//	
	//	Для каждого ДанныеКурса Из МассивДанных Цикл
	//  		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = СтрШаблон("1 %1 = %2 BYN за %3 ед.", 
	//					ДанныеКурса["Cur_Abbreviation"], 
	//					ДанныеКурса["Cur_OfficialRate"], 
	//					ДанныеКурса["Cur_Scale"]);
	//		Сообщение.Сообщить();
	//		
	//		Валюта = СоответствиеВалют[ДанныеКурса["Cur_Abbreviation"]];
	//		Если ЗначениеЗаполнено(Валюта) Тогда
	//			ЗаписьРегистра = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
	//			ЗаписьРегистра.Период	 = ДатаКурсов;
	//			ЗаписьРегистра.Валюта	 = Валюта;
	//			ЗаписьРегистра.Курс		 = ДанныеКурса["Cur_OfficialRate"];
	//			ЗаписьРегистра.Кратность = ДанныеКурса["Cur_Scale"];
	//			ЗаписьРегистра.Записать();
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//Иначе
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = СтрШаблон("Не удалось выполнить запрос, код состояния: %1, ответ сервера: %2",
	//								Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
	//	Сообщение.Сообщить();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРеквизитыПоИНН(Команда)
	ПолучитьРеквизитыПоИНННаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьРеквизитыПоИНННаСервере()
	
	// https://egrul.itsoft.ru/short_data/?7730588444
	ДанныеКонтрагента = РаботаССервисами.ПолучитьДанныеКонтрагентаИзEГРЮЛ(ИНН);
	Если ДанныеКонтрагента <> Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ДанныеКонтрагента.Наименование;
		Сообщение.Сообщить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СократитьСсылку(Команда)
	СократитьСсылкуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СократитьСсылкуНаСервере()
	
	//https://api-ssl.bitly.com/v4/shorten
	
	ДанныеСсылки = РаботаССервисами.ПолучитьКороткуюСсылку(ДлиннаяСсылка);
	КороткаяСсылка = ДанныеСсылки.КороткаяСсылка;
	Если ДанныеСсылки.QR <> Неопределено Тогда
		ДанныеКартинки = ДанныеСсылки.QR;
		АдресКартинкиQR = ПоместитьВоВременноеХранилище(ДанныеКартинки);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеВTelegram(Команда)
	ОтправитьСообщениеВTelegramНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеВTelegramНаСервере()
	
	//https://api.telegram.org/bot6097479365:AAGZazbGkEF4DVXYuQLiEsTzWUuUUq9JpfU/sendMessage?chat_id=144474639&text=Привет, дружище!
	СообщениеОтправлено = РаботаССервисами.ОтправитьСообщениеВTelegram("144474639", ТекстСообщения);
	
КонецПроцедуры














